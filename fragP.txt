#version 330
uniform mat4 viewMatrix, projMatrix;

uniform vec3 Ambient;
uniform vec3 LightColor;
uniform vec3 LightPosition;
uniform float Shininess;
uniform float Strength;
uniform vec3 CamaraPos;

uniform sampler2D uSampler;

in vec2 UV;
in vec3 Normal;
in vec4 Position;

out vec4 outputF;
 
void main()
{
	vec3 position = vec3(Position.x, Position.y, Position.z);

	// Diffuse
	vec3 lightDir = normalize(LightPosition - position);  
	float diff = max(dot(Normal, lightDir), 0.0);
	vec3 diffuse = diff * LightColor;

	// Specular
	vec3 viewDir = normalize(CamaraPos - position);
	vec3 reflectDir = reflect(-lightDir, Normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), Shininess);
	vec3 specular = Strength * spec * LightColor; 

	// Output
	outputF = texture(uSampler, UV) * vec4(Ambient + diffuse + specular, 1);
}