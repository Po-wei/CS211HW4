#version 330
uniform mat4 viewMatrix, projMatrix;

uniform vec3 Ambient;
uniform vec3 LightColor;
uniform vec3 LightPosition;
uniform float Shininess;
uniform float Strength;
uniform vec3 CamaraPos;

uniform sampler2D myTextureSampler;

in vec3 Color;
in vec3 Normal;
in vec3 Position;

in vec2 UV;

out vec4 outputF;
 
void main()
{
	// Diffuse
	vec3 lightDir = normalize(LightPosition - Position);  
	float diff = max(dot(Normal, lightDir), 0.0);
	vec3 diffuse = diff * LightColor;

	// Specular
	vec3 viewDir = normalize(CamaraPos - Position);
	vec3 reflectDir = reflect(-lightDir, Normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), Shininess);
	vec3 specular = Strength * spec * LightColor; 

	// Output
	outputF = vec4(Color, 1) * vec4(Ambient + diffuse + specular, 1);
}