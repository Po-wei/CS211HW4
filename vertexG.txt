#version 330
 
uniform mat4 viewMatrix, projMatrix, modelMatrix;
uniform mat3 normalMatrix;
uniform vec3 Ambient;
uniform vec3 LightColor;
uniform vec3 LightPosition;
uniform float Shininess;
uniform float Strength;
uniform vec3 CamaraPos;

layout(location=0) in vec3 position;
layout(location=1) in vec2 vertexUV;
layout(location=2) in vec3 normal;

out vec4 Color;

uniform sampler2D uSampler;

void main()
{
	vec3 Normal = vec3(normalize(modelMatrix * vec4(normal, 0.0)));

	// Diffuse
	vec3 lightDir = normalize(LightPosition - position);  
	float diff = max(dot(Normal, lightDir), 0.0);
	vec3 diffuse = diff * LightColor;

	// Specular
	vec3 viewDir = normalize(CamaraPos - position);
	vec3 reflectDir = reflect(-lightDir, Normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), Shininess);
	vec3 specular = Strength * spec * LightColor; 

	Color = texture(uSampler, vertexUV) * vec4(Ambient + diffuse + specular, 1.0);
    gl_Position = projMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);
}


