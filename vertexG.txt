#version 330
 
uniform mat4 viewMatrix, projMatrix, modelMatrix;
uniform mat3 normalMatrix;
uniform vec3 Ambient;
uniform vec3 LightColor;
uniform vec3 LightPosition;
uniform float Shininess;
uniform float Strength;
uniform vec3 CamaraPos;

layout (location = 0) in vec4 position;
in vec3 color;
in vec3 normal;

layout(location = 1) in vec2 vertexUV;

out vec3 Color;

// UV is the texture coordinate of this vertex
out vec2 UV;

void main()
{
	UV = vertexUV;
	vec3 Position = vec3(position.x, position.y, position.z);
	vec4 rotatedNormal = modelMatrix * vec4(normal, 0.0);
	vec3 Normal = normalize(normalMatrix * vec3(rotatedNormal));

	// Diffuse
	vec3 lightDir = normalize(LightPosition - Position);  
	float diff = max(dot(Normal, lightDir), 0.0);
	vec3 diffuse = diff * LightColor;

	// Specular
	vec3 viewDir = normalize(CamaraPos - Position);
	vec3 reflectDir = reflect(-lightDir, Normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), Shininess);
	vec3 specular = Strength * spec * LightColor; 

	Color = color * (Ambient + diffuse + specular);
    gl_Position = projMatrix * viewMatrix * modelMatrix * position;
}


